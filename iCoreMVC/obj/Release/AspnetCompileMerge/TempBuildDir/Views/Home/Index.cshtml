@{
    ViewBag.Title = "Login";
    Layout = null;
}
<style>
    .hide1 {
        color: white;
        background-color: white;
        cursor: not-allowed;
    }

    .loginscreen {
        width: 360px;
    }
</style>
@Styles.Render("~/Content/icore_css")



<script>
   
</script>

@Scripts.Render("~/bundles/icore_js")
@*@Scripts.Render("~/bundles/icore_js_ie")*@
@Scripts.Render("~/bundles/icore_app_js")

@model BussinessLayer.Common.LoginDetails

<title>Login - Ecesis BTS</title>
<link rel="shortcut icon" type="image/icon" href="~/Content/Image/new.png" />
<body class="gray-bg">
    <div id="mainlogo" style="background-color:rgba(0,0,0,.075)">
        <center><img src="~/Content/Image/logo.png" style="padding: 5px;" /></center>

    </div>


    <div class="middle-box text-center loginscreen animated fadeInDown" style="width:360px"> 
        <div class="row" style="width:110%">
            <center><h3 class="font-bold">Welcome to BPO Tracking System</h3></center>
            <div class="ibox-content">

                @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { name = "frm", id = "frm" }))
                {
                    <form class="m-t" role="form">
                        @*action=""*@
                        <div class="form-group">
                            @*<input type="email" class="form-control" placeholder="Username" required="">*@
                            @Html.TextBoxFor(a => a.User, new { @class = "form-control", placeholder = "Username", autocomplete = "off", required = "" })

                        </div>
                        <div class="form-group">
                            @*<input type="password" class="form-control" placeholder="Password" required="">*@
                            @Html.PasswordFor(a => a.Password, new { @class = "form-control", placeholder = "Password", autocomplete = "off", required = "" })
                        </div>
                        @*<button type="submit" class="btn btn-primary block full-width m-b">Login</button>*@
                        <button onclick="encode64(this.value)" type="submit" class="btn btn-primary block full-width m-b">Login</button>

                        <a href="#" onclick="newuser()">
                            <small>Forgot password?</small>
                        </a>
                        <div style="display:none">
                            <input type="text" name="newuser" id="newuser" />
                            <input type="text" name="newpwd" id="newpwd" />
                        </div>
                        @*<p class="text-muted text-center">
                                <small>Do not have an account?</small>
                            </p>
                                <div style="display:none">
                                    <input type="text" name="newuser"  id="newuser" />
                                    <input type="text" name="newpwd"  id="newpwd" />
                                </div>
                                <a class="btn btn-sm btn-white btn-block" href="#" onclick="newuser(~/Master/PasswordReset)">Create an account</a>*@
                    </form>
                }
                <center>
                    <div style="color:red" id="errormsg">@ViewBag.Message</div>
                </center>

                @*<p class="m-t">
                        <small>Ecesis &copy; 2014</small>../Home/Register
                    </p>*@
            </div>

            <p class="m-t"> <small> Copyright Ecesis © 2014-2015</small> </p>
        </div>
    </div>



</body>

<script>
    function newuser() {
        $('#newuser').attr('autocomplete', 'false');
        $('#newpwd').attr('autocomplete', 'false');
        //UserPassword
        $('#newuser').addClass("hide1");
        $('#newpwd').addClass("hide1");

        $('#newuser').val("$login$user$");
        $('#newpwd').val("admin")
        var id = $('#frm').value;
        newencode64(id);
        $("#frm").submit();
    }
    var END_OF_INPUT = -1;
    var uname = null;
    var pword = null;
    function disableBack() { window.history.forward() }

    //window.onload = disableBack();
    //window.onpageshow = function (evt) { if (evt.persisted) disableBack() }
    $(document).ready(function () {

        //alert( localStorage.getItem("islogin"));
        //if (localStorage.getItem("islogin") == "on" && CurrentUserName!=undefined) {
        //if (localStorage.getItem("islogin") == "on" ) {
        if (localStorage.getItem("islogin") == "on" && localStorage.getItem("cu") != null) {

            //alert(localStorage.getItem("islogin"));
            //alert(localStorage.getItem("cu"));
            window.location = "Home/ApplicationHome";

        }
        setInterval(function () {
            if (localStorage.getItem("islogin") == "on" && localStorage.getItem("cu") != null) {
                window.location = "Home/ApplicationHome";
            }
            //alert(CurrentUserName);
        }, 5000);

        //alert(localStorage.getItem("islogin"))
        $(window).load(function () {
            $('#User').value = "";
            $('#Password').vaue = "";
            $('#newuser').value = "";
            $('#newpwd').vaue = "";

        });

    });
    function setBase64Str(str) {
        base64Str = str;
        base64Count = 0;
    }

    function encode64(str) {
        var str = $('#Password').val();


        setBase64Str(str);
        var result = '';
        var inBuffer = new Array(3);
        var lineCount = 0;
        var done = false;
        while (!done && (inBuffer[0] = readBase64()) != END_OF_INPUT) {
            inBuffer[1] = readBase64();
            inBuffer[2] = readBase64();
            result += (base64Chars[inBuffer[0] >> 2]);
            if (inBuffer[1] != END_OF_INPUT) {
                result += (base64Chars[((inBuffer[0] << 4) & 0x30) | (inBuffer[1] >> 4)]);
                if (inBuffer[2] != END_OF_INPUT) {
                    result += (base64Chars[((inBuffer[1] << 2) & 0x3c) | (inBuffer[2] >> 6)]);
                    result += (base64Chars[inBuffer[2] & 0x3F]);
                } else {
                    result += (base64Chars[((inBuffer[1] << 2) & 0x3c)]);
                    result += ('=');
                    done = true;
                }
            } else {
                result += (base64Chars[((inBuffer[0] << 4) & 0x30)]);
                result += ('=');
                result += ('=');
                done = true;
            }
            lineCount += 4;
            if (lineCount >= 76) {
                result += ('\n');
                lineCount = 0;
            }
        }

        $('#Password').val(result);
        //$("#<%= HidBase64Password.ClientID %>").val(result);
        //var logout = TimeClockManagement();
        //            if (logout == false) {
        //                window.parent.location.href = 'login.aspx';
        //                return;
        //            }
        localStorage.setItem("loginpwd", result);
        return result;

    }
    function newencode64(str) {
        var str = $('#newpwd').val();
        setBase64Str(str);
        var result = '';
        var inBuffer = new Array(3);
        var lineCount = 0;
        var done = false;
        while (!done && (inBuffer[0] = readBase64()) != END_OF_INPUT) {
            inBuffer[1] = readBase64();
            inBuffer[2] = readBase64();
            result += (base64Chars[inBuffer[0] >> 2]);
            if (inBuffer[1] != END_OF_INPUT) {
                result += (base64Chars[((inBuffer[0] << 4) & 0x30) | (inBuffer[1] >> 4)]);
                if (inBuffer[2] != END_OF_INPUT) {
                    result += (base64Chars[((inBuffer[1] << 2) & 0x3c) | (inBuffer[2] >> 6)]);
                    result += (base64Chars[inBuffer[2] & 0x3F]);
                } else {
                    result += (base64Chars[((inBuffer[1] << 2) & 0x3c)]);
                    result += ('=');
                    done = true;
                }
            } else {
                result += (base64Chars[((inBuffer[0] << 4) & 0x30)]);
                result += ('=');
                result += ('=');
                done = true;
            }
            lineCount += 4;
            if (lineCount >= 76) {
                result += ('\n');
                lineCount = 0;
            }
        }

        $('#newpwd').val(result);
        //$("#<%= HidBase64Password.ClientID %>").val(result);
        //var logout = TimeClockManagement();
        //            if (logout == false) {
        //                window.parent.location.href = 'login.aspx';
        //                return;
        //            }

        return result;

    }


    var base64Chars = new Array(
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', '0', '1', '2', '3',
        '4', '5', '6', '7', '8', '9', '+', '/'
        );

    var reverseBase64Chars = new Array();

    for (var i = 0; i < base64Chars.length; i++) {
        reverseBase64Chars[base64Chars[i]] = i;
    }

    var base64Str;
    var base64Count;

    function setBase64Str(str) {
        base64Str = str;
        base64Count = 0;
    }

    function readBase64() {
        if (!base64Str) return END_OF_INPUT;
        if (base64Count >= base64Str.length) return END_OF_INPUT;
        var c = base64Str.charCodeAt(base64Count) & 0xff;
        base64Count++;
        return c;
    }



    function readReverseBase64() {

        if (!base64Str) return END_OF_INPUT;
        while (true) {
            if (base64Count >= base64Str.length) return END_OF_INPUT;
            var nextCharacter = base64Str.charAt(base64Count);
            base64Count++;
            if (reverseBase64Chars[nextCharacter]) {
                return reverseBase64Chars[nextCharacter];
            }
            if (nextCharacter == 'A') return 0;
        }
        return END_OF_INPUT;
    }

    function ntos(n) {

        n = n.toString(16);
        if (n.length == 1) n = "0" + n;
        n = "%" + n;
        return unescape(n);
    }

    function decodeBase64(str) {

        setBase64Str(str);
        var result = "";
        var inBuffer = new Array(4);
        var done = false;
        while (!done && (inBuffer[0] = readReverseBase64()) != END_OF_INPUT && (inBuffer[1] = readReverseBase64()) != END_OF_INPUT) {
            inBuffer[2] = readReverseBase64();
            inBuffer[3] = readReverseBase64();
            result += ntos((((inBuffer[0] << 2) & 0xff) | inBuffer[1] >> 4));
            if (inBuffer[2] != END_OF_INPUT) {
                result += ntos((((inBuffer[1] << 4) & 0xff) | inBuffer[2] >> 2));
                if (inBuffer[3] != END_OF_INPUT) {
                    result += ntos((((inBuffer[2] << 6) & 0xff) | inBuffer[3]));
                } else {
                    done = true;
                }
            } else {
                done = true;
            }
        }
        return result;
    }

</script>
